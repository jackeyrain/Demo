//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication5.OPC {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EquipmentCmd", Namespace="http://schemas.datacontract.org/2004/07/DM.MasterData")]
    [System.SerializableAttribute()]
    public partial class EquipmentCmd : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApplication5.OPC.EquipmentVariableCmd[] VariableCmdsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApplication5.OPC.EquipmentVariableCmd[] VariableCmds {
            get {
                return this.VariableCmdsField;
            }
            set {
                if ((object.ReferenceEquals(this.VariableCmdsField, value) != true)) {
                    this.VariableCmdsField = value;
                    this.RaisePropertyChanged("VariableCmds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EquipmentVariableCmd", Namespace="http://schemas.datacontract.org/2004/07/DM.MasterData")]
    [System.SerializableAttribute()]
    public partial class EquipmentVariableCmd : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClientHandleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClientHandle {
            get {
                return this.ClientHandleField;
            }
            set {
                if ((this.ClientHandleField.Equals(value) != true)) {
                    this.ClientHandleField = value;
                    this.RaisePropertyChanged("ClientHandle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvokeResponse", Namespace="http://schemas.datacontract.org/2004/07/OPC.Common")]
    [System.SerializableAttribute()]
    public partial class InvokeResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccessed {
            get {
                return this.IsSuccessedField;
            }
            set {
                if ((this.IsSuccessedField.Equals(value) != true)) {
                    this.IsSuccessedField = value;
                    this.RaisePropertyChanged("IsSuccessed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OPC.IWriteOPCEquipmentService")]
    public interface IWriteOPCEquipmentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/WriteEquipment", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/WriteEquipmentResponse")]
        ConsoleApplication5.OPC.InvokeResponse WriteEquipment(ConsoleApplication5.OPC.EquipmentCmd cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/WriteEquipment", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/WriteEquipmentResponse")]
        System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> WriteEquipmentAsync(ConsoleApplication5.OPC.EquipmentCmd cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/WriteVariable", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/WriteVariableResponse")]
        ConsoleApplication5.OPC.InvokeResponse WriteVariable(long equipmentId, int clientHandle, string v);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/WriteVariable", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/WriteVariableResponse")]
        System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> WriteVariableAsync(long equipmentId, int clientHandle, string v);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/ReadVariable", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/ReadVariableResponse")]
        ConsoleApplication5.OPC.InvokeResponse ReadVariable(long equipmentId, int clientHandle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWriteOPCEquipmentService/ReadVariable", ReplyAction="http://tempuri.org/IWriteOPCEquipmentService/ReadVariableResponse")]
        System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> ReadVariableAsync(long equipmentId, int clientHandle);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWriteOPCEquipmentServiceChannel : ConsoleApplication5.OPC.IWriteOPCEquipmentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WriteOPCEquipmentServiceClient : System.ServiceModel.ClientBase<ConsoleApplication5.OPC.IWriteOPCEquipmentService>, ConsoleApplication5.OPC.IWriteOPCEquipmentService {
        
        public WriteOPCEquipmentServiceClient() {
        }
        
        public WriteOPCEquipmentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WriteOPCEquipmentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WriteOPCEquipmentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WriteOPCEquipmentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleApplication5.OPC.InvokeResponse WriteEquipment(ConsoleApplication5.OPC.EquipmentCmd cmd) {
            return base.Channel.WriteEquipment(cmd);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> WriteEquipmentAsync(ConsoleApplication5.OPC.EquipmentCmd cmd) {
            return base.Channel.WriteEquipmentAsync(cmd);
        }
        
        public ConsoleApplication5.OPC.InvokeResponse WriteVariable(long equipmentId, int clientHandle, string v) {
            return base.Channel.WriteVariable(equipmentId, clientHandle, v);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> WriteVariableAsync(long equipmentId, int clientHandle, string v) {
            return base.Channel.WriteVariableAsync(equipmentId, clientHandle, v);
        }
        
        public ConsoleApplication5.OPC.InvokeResponse ReadVariable(long equipmentId, int clientHandle) {
            return base.Channel.ReadVariable(equipmentId, clientHandle);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication5.OPC.InvokeResponse> ReadVariableAsync(long equipmentId, int clientHandle) {
            return base.Channel.ReadVariableAsync(equipmentId, clientHandle);
        }
    }
}
